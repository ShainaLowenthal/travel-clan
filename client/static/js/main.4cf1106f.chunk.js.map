{"version":3,"sources":["components/ChannelList.js","components/Sidebar.js","socket.js","ChatStore.js","components/NameEntry.js","components/Navbar.js","components/Message.js","components/NewMessageEntry.js","components/MessagesList.js","components/Main.js","index.js"],"names":["ChannelList","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","filterMessageChannel","id","props","messages","filter","m","channelId","randomMessages","generalMessages","dogsMessages","lunchMessages","react_default","a","createElement","NavLink","to","activeClassName","className","length","Component","withRouter","connect","state","Sidebar","href","alt","components_ChannelList","socket","io","window","location","origin","on","console","log","message","store","dispatch","gotNewMessage","gotMessagesFromServer","type","initialState","user","createStore","undefined","action","objectSpread","concat","toConsumableArray","payload","composeWithDevTools","applyMiddleware","thunkMiddleware","NameEntry","call","handleChange","bind","assertThisInitialized","event","name","target","userSet","htmlFor","onChange","userName","React","nameStr","Navbar","components_NameEntry","Message","src","author","image","content","NewMessageEntry","handleSubmit","preventDefault","submitMessage","onSubmit","placeholder","_ref3","asyncToGenerator","regenerator_default","mark","_callee2","getState","_ref4","newMessage","wrap","_context2","prev","next","axios","post","sent","data","emit","stop","_x2","_x3","sendMessage","Number","match","params","filteredMessages","map","components_NewMessageEntry","Main","loadMessages","Sidebar_Sidebar","Navbar_Navbar","Switch","Route","path","component","MessagesList","Redirect","_ref","_callee","_ref2","_context","get","_x","ReactDOM","render","es","BrowserRouter","components_Main","document","getElementById"],"mappings":"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","file":"static/js/main.4cf1106f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { NavLink, withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\n// These values are all hardcoded...for now!\n// Soon, we'll fetch them from the server!\nconst RANDOM_CHANNEL = '/channels/1'\nconst GENERAL_CHANNEL = '/channels/2'\nconst DOGS_CHANNEL = '/channels/3'\nconst LUNCH_CHANNEL = '/channels/4'\n\nexport class ChannelList extends Component {\n    render() {\n        const filterMessageChannel = id =>\n            this.props.messages.filter(m => m.channelId === id)\n        const randomMessages = filterMessageChannel(1)\n        const generalMessages = filterMessageChannel(2)\n        const dogsMessages = filterMessageChannel(3)\n        const lunchMessages = filterMessageChannel(4)\n\n        return (\n            <ul>\n                <li>\n                    <NavLink to={RANDOM_CHANNEL} activeClassName=\"active\">\n                        <span># really_random</span>\n                        <span className=\"badge\">{ randomMessages.length }</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={GENERAL_CHANNEL} activeClassName=\"active\">\n                        <span># generally_speaking</span>\n                        <span className=\"badge\">{ generalMessages.length }</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={DOGS_CHANNEL} activeClassName=\"active\">\n                        <span># dogs_of_fullstack</span>\n                        <span className=\"badge\">{ dogsMessages.length }</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={LUNCH_CHANNEL} activeClassName=\"active\">\n                        <span># lunch_planning</span>\n                        <span className=\"badge\">{ lunchMessages.length }</span>\n                    </NavLink>\n                </li>\n            </ul>\n        )\n    }\n}\n\nconst mapState = state => ({\n    messages: state.messages,\n})\n\nexport default withRouter(connect(mapState)(ChannelList))","import React, { Component } from 'react';\nimport ChannelList from './ChannelList';\n\nexport default class Sidebar extends Component {\n\n  render () {\n    return (\n      <section className=\"sidebar\">\n        <div className=\"sidebar-header\">\n          <h3 href=\"#\">\n            <div>Clan Chat</div>\n            <i alt=\"Brand\" className=\"glyphicon glyphicon-comment\">\n            </i>\n          </h3>\n        </div>\n        <h5>Channels</h5>\n        <ChannelList />\n      </section>\n    );\n  }\n}\n","import io from 'socket.io-client';\nimport store, { gotNewMessage } from './ChatStore'\n\nconst socket = io(window.location.origin);\n\nsocket.on('connect', () => {\n  console.log('I am now connected to the server!');\n});\n\nsocket.on('new-message', (message) => {\n  store.dispatch(gotNewMessage(message))\n})\n\nexport default socket;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport axios from 'axios'\nimport socket from './socket'\n\n// Action Types :-)\nconst GOT_MESSAGES_FROM_SERVER = 'GOT_MESSAGES_FROM_SERVER'\nconst GOT_NEW_MESSAGE = 'GOT_NEW_MESSAGE'\nconst USER_SET = 'USER_SET'\n\n// Action Creators\nconst gotMessagesFromServer = messages => ({\n    type: GOT_MESSAGES_FROM_SERVER,\n    messages,\n})\nexport const gotNewMessage = message => ({\n    type: GOT_NEW_MESSAGE,\n    message,\n})\nexport const userSet = userName => ({\n    type: USER_SET,\n    payload: userName,\n})\n\n// Thunk Creator\nexport const fetchMessages = () => async dispatch => {\n    const { data: messages } = await axios.get('/api/messages')\n    dispatch(gotMessagesFromServer(messages))\n}\nexport const sendMessage = message => async (dispatch, getState) => {\n    message.name = getState().user\n    const { data: newMessage } = await axios.post('/api/messages', message)\n    dispatch(gotNewMessage(newMessage))\n    socket.emit('new-message', newMessage)\n}\n\n// Reducer\nconst initialState = {\n    messages: [],\n    user: 'Cody',\n}\n\n// // alternative pattern for writing reducer cases\n// const mapTypeToCallback = {\n//     [GOT_MESSAGES_FROM_SERVER]: (state, action) => ({\n//         ...state,\n//         messages: action.messages,\n//     }),\n// }\n\n// :: (State, Action) -> State\nconst reducer = (state = initialState, action) => {\n    // return mapTypeToCallback[action.type](state, action)\n    switch (action.type) {\n        case GOT_MESSAGES_FROM_SERVER:\n            return { ...state, messages: action.messages }\n        case GOT_NEW_MESSAGE:\n            return { ...state, messages: [...state.messages, action.message] }\n        case USER_SET:\n            return { ...state, user: action.payload }\n        default:\n            return state\n    }\n}\n\nexport default createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n)\n","/*\nFor now, the user can enter their display name.\nEventually it will be inputed to the store from the original authentication \nand this will be uneccesary.\n */\n\n\nimport React from 'react'\nimport { connect } from 'react-redux'\n\n\nimport { userSet } from '../ChatStore'\n\nclass NameEntry extends React.Component {\n    constructor() {\n        super()\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        const { value: name } = event.target\n        this.props.userSet(name)\n    }\n\n    render() {\n        return (\n            <div>\n                <label htmlFor=\"name\">Your name:</label>\n                <input\n                    name=\"name\"\n                    onChange={this.handleChange}\n                    value={this.props.userName}\n                />\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    \n    state => ({\n        userName: state.user,\n    }),\n    dispatch => ({\n        userSet: nameStr => dispatch(userSet(nameStr)),\n    })\n)(NameEntry)\n","import React, { Component } from 'react';\n// import NameEntry from './NameEntry'\nimport NameEntry from './NameEntry'\n\nexport default class Navbar extends Component {\n\n  render () {\n    return (\n      <nav>\n        <h3># channelname goes here</h3>\n        <NameEntry/>\n        \n      </nav>\n    );\n  }\n}\n","import React from 'react';\n\nexport default function Message (props) {\n\n  const message = props.message;\n\n  return (\n    <li className=\"media\">\n      <div className=\"media-left\">\n        <a href=\"#\">\n          <img className=\"media-object\" src={message.author.image} alt=\"image\" />\n        </a>\n      </div>\n      <div className=\"media-body\">\n        <h4 className=\"media-heading\">{ message.author.name }</h4>\n        { message.content }\n      </div>\n    </li>\n  );\n}","import React, { Component } from 'react';\nimport { sendMessage } from '../ChatStore'\n// From Justin->TODO: use `withRouter` if we have update blocking issues\nimport { connect } from 'react-redux'\n\nexport class NewMessageEntry extends Component {\n\n  constructor () {\n    super()\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleSubmit (event) {\n    event.preventDefault()\n    const message = event.target.content.value\n    this.props.submitMessage({\n      content: message,\n      channelId: this.props.channelId\n    })\n  }\n\n  render () {\n    return (\n      <form id=\"new-message-form\" onSubmit={this.handleSubmit}>\n        <div className=\"input-group input-group-lg\">\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            name=\"content\"\n            placeholder=\"Say something nice...\"\n          />\n          <span className=\"input-group-btn\">\n            <button className=\"btn btn-default\" type=\"submit\">Chat!</button>\n          </span>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapDispatch = dispatch => ({\n  submitMessage: message => dispatch(sendMessage(message))\n})\n\nexport default connect(null, mapDispatch)(NewMessageEntry)\n","import React, { Component } from 'react'\nimport Message from './Message'\nimport NewMessageEntry from './NewMessageEntry'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\n const MessagesList = props => {\n    const channelId = Number(props.match.params.channelId) // because it's a string \"1\", not a number!\n    const messages = props.messages\n    const filteredMessages = messages.filter(\n        message => message.channelId === channelId\n    )\n\n    return (\n        <div>\n            <ul className=\"media-list\">\n                {filteredMessages.map(message => (\n                    <Message message={message} key={message.id} />\n                ))}\n            </ul>\n            <NewMessageEntry channelId={ channelId }/>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    messages: state.messages,\n})\n\nexport default withRouter(connect(mapStateToProps, null)(MessagesList))","import React, { Component } from 'react';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux'\n\nimport Sidebar from './Sidebar';\nimport Navbar from './Navbar';\nimport MessagesList from './MessagesList';\nimport { fetchMessages } from '../ChatStore'\n\nexport class Main extends Component {\n\n  componentDidMount () {\n    this.props.loadMessages()\n  }\n\n  \n  render () {\n    return (\n      <div>\n        <Sidebar />\n        <Navbar />\n        <main>\n          <Switch>\n            <Route path=\"/channels/:channelId\" component={MessagesList} />\n            <Redirect to=\"/channels/1\" />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  loadMessages: () => dispatch(fetchMessages()),\n})\n\nexport default withRouter(connect(null, mapDispatchToProps)(Main))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux';\nimport { Main } from './components'\n\n// import * as serviceWorker from './serviceWorker';\nimport store from '../src/ChatStore';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n       <Main/>\n    </Router> \n  </Provider>,\n  document.getElementById('app')\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}